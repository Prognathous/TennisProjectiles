<!DOCTYPE html>
<html>
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
		<meta charset="utf-8">
		<title>Tennis Serve Projectiles</title>
		<link rel="icon" href="./BallSprite.png">
		
		<style>
		#leftbox {
            float: left;
            width: 440px;
            height: 100%;
        } 
        #middlebox {
            float: left;
            width: 720px;
            height: 100%;
        }
        #rightbox {
            float: left;
            width: 130px;			
            height: 100%;
        }
		
		.form-fields {
			display: table;
		}		
		.form-p {
			display: table-row;
		}
		.form-field-span,
		.form-field-label,
		.form-field-control,
		.form-field-input {
			display: table-cell;
			padding: 3px 6px;
		}
		</style>
	</head>

    <body onload="setupPage()">
		<div id="leftbox">
			<p>
				<a href="https://twu.tennis-warehouse.com/learning_center/aerodynamics2.php">
					https://twu.tennis-warehouse.com/learning_center/aerodynamics2.php
				</a>			
			<p>
				<a href="https://www.researchgate.net/publication/313199404_The_drag_coefficient_of_tennis_balls">
					https://www.researchgate.net/publication/313199404_The_drag_coefficient_of_tennis_balls
				</a>
			</p>
			<form id="parameters" class="form-fields">
				<p class="form-p">
					<label class="form-field-label">Launch height:</label>
					<input class="form-field-input" id="launchHeight" type="number" min="0" max="4.0" value="2.718" step="0.001" style="vertical-align: middle;" onchange="onLaunchHeightChanged(this.value);"> (m)</input>
					<span class="form-field-span" id="feetAndInches" />
				</p>
				<p class="form-p">
					<label class="form-field-label">Launch angle:</label>
					<input class="form-field-input" id="launchAngle" type="number" min="-30" max="30.0" value="-4.8" step="0.1" style="vertical-align: middle;" onchange="onLaunchAngleChanged(this.value);"> (deg)</input>
				</p>
				<p class="form-p">
					<label class="form-field-label">Launch speed:</label>
					<input class="form-field-input" id="launchSpeed" type="number" min="50" max="163.0" value="120.0" step="0.5" style="vertical-align: middle;" onchange="onLaunchSpeedChanged(this.value);"> (mph)</input>					
				</p>
				<p class="form-p">
					<label class="form-field-label">Serve offset:</label>
					<input class="form-field-input" id="baselineOffset" type="number" min="0" max="4.11" value="1.0" step="0.1" style="vertical-align: middle;" onchange="onBaselineOffsetChanged(this.value);"> (m)</input>					
				</p>
				<p class="form-p">
					<label class="form-field-label">Target offset:</label>
					<input class="form-field-input" id="targetOffset" type="number" min="0" max="4.11" value="0.2" step="0.1" style="vertical-align: middle;" onchange="onTargetOffsetChanged(this.value);"> (m)</input>
				</p>
				<p class="form-p">
					<label class="form-field-label">Ball mass:</label>
					<input class="form-field-input" id="ballMass" type="number" min="0.01" max="0.07" value="0.057" step="0.001" style="vertical-align: middle;" onchange="onBallMassChanged(this.value);"> (kg)</input>					
				</p>
				<p class="form-p">
					<label class="form-field-label">Ball radius:</label>
					<input class="form-field-input" id="ballRadius" type="number" min="0.02" max="0.05" value="0.0335" step="0.0001" style="vertical-align: middle;" onchange="onBallRadiusChanged(this.value);"> (kg)</input>					
				</p>
				<p class="form-p">
					<label class="form-field-label">Ball cross section area:</label>
					<span class="form-field-span">
						<label id="ballCrossSectionArea">0.00353</label>
						<label> (m²)</label>
					</span>
				</p>
				<p class="form-p">
					<label class="form-field-label">Drag coefficient:</label>
					<input class="form-field-input" id="dragCoefficient" type="number" min="0.5" max="0.7" value="0.55" step="0.01" style="vertical-align: middle;" onchange="onDragCoefficientChanged(this.value);"></input>
				</p>
				<p class="form-p">
					<label class="form-field-label">Air density "ρ":</label>
					<input class="form-field-input" id="airDensity" type="number" min="0.0" max="3.0" value="1.21" step="0.01" style="vertical-align: middle;" onchange="onAirDensityChanged(this.value);"> (kg/m³)</input>
				</p>
				<p class="form-p">
					<label class="form-field-label">Gravity:</label>
					<label class="form-field-label">-9.80665m/s²</label>
				</p>
			</form>
		</div>
		<div id="middlebox">
			<canvas id="simulator" width="720" height="540" style="top: 0px; cursor: -webkit-grab;"></canvas>
			<p>
				Landing distance: 
				<span id="landingDist"></span>
			</p>
			<p>
				Net clearance: 
				<span id="netClearance"></span>
			</p>
			<p>
				Landing speed: 
				<span id="landingSpeed"></span>
			</p>
		</div>
		<div id="rightbox">
			<form id="cameraSettings">
				<input type="checkbox" id="ballCameraSelect" name="ballCam" />
				<label for="ballCam">Use ball camera</label>
			</form>
		</div>
		
		<script>			
			function updateImperialHeight() {
			
				var launchHeight = INITIAL_HEIGHT;
				var decimalFeet = (launchHeight * 3.28084);
				var feet = Math.floor(decimalFeet);
				var inches = (decimalFeet - feet) * 12;
				inches = Math.floor(inches * 10) / 10.0;
							
				var feetAndInches = document.getElementById("feetAndInches");			
				feetAndInches.innerText = "(" + feet.toString() + "'" + inches + '"' + ")";
			};
		
			function onLaunchHeightChanged(launchHeight) {				
				
				INITIAL_HEIGHT = Number(launchHeight);
				updateImperialHeight();
				
				window.simulator.startBallPath();
			};
			
			function onLaunchAngleChanged (launchAngleDeg) {
				
				INITIAL_ANGLE = Number(launchAngleDeg);
				window.simulator.startBallPath();
			};
			
			function onLaunchSpeedChanged (launchSpeedMPH) {
				
				// convert to m/s for the calculations
				INITIAL_SPEED = Number(launchSpeedMPH) / 2.23694;
				window.simulator.startBallPath();
			};
			
			function onBaselineOffsetChanged (baselineOffset) {
				
				BASELINE_OFFSET = Number(baselineOffset);
				window.simulator.startBallPath();
			};
				
			function onTargetOffsetChanged (targetOffset) {
				
				TARGET_OFFSET = Number(targetOffset);
				window.simulator.startBallPath();
			};
			
			function onBallMassChanged (ballMass) {
			
				BALL_MASS = Number(ballMass);
				window.simulator.startBallPath();
			};
			
			function updateBallCrossSectionArea() {
			
				BALL_CROSSSECTION_AREA = Math.PI * (BALL_RADIUS * BALL_RADIUS);
				
				var decPlacesDisplay = 5;
				var rounded = Math.round(BALL_CROSSSECTION_AREA * Math.pow(10, decPlacesDisplay));
				document.getElementById("ballCrossSectionArea").innerText = (rounded / Math.pow(10, decPlacesDisplay)).toString();
			};
			
			function onBallRadiusChanged (ballRadius) {
			
				BALL_RADIUS = Number(ballRadius);												
				updateBallCrossSectionArea();
				
				window.simulator.startBallPath();
			};
			
			function onDragCoefficientChanged (dragCoefficient) {
			
				DRAG_COEFFICIENT = Number(dragCoefficient);
				window.simulator.startBallPath();
			};
			
			function onAirDensityChanged (airDensity) {
			
				AIR_DENSITY = Number(airDensity);
				window.simulator.startBallPath();
			};
		
			function setupPage() {				
			
				parameters.reset();
				cameraSettings.reset();
				
				INITIAL_HEIGHT = Number(document.getElementById("launchHeight").value);
				updateImperialHeight();
				INITIAL_ANGLE = Number(document.getElementById("launchAngle").value);
				INITIAL_SPEED = Number(document.getElementById("launchSpeed").value) / 2.23694;
				BASELINE_OFFSET = Number(document.getElementById("baselineOffset").value);
				TARGET_OFFSET = Number(document.getElementById("targetOffset").value);
				BALL_MASS = Number(document.getElementById("ballMass").value);				
				BALL_RADIUS = Number(document.getElementById("ballRadius").value);				
				updateBallCrossSectionArea();
				DRAG_COEFFICIENT = Number(document.getElementById("dragCoefficient").value);
				AIR_DENSITY = Number(document.getElementById("airDensity").value);
				
				// kick off an initial path computation
				simulator.startBallPath();
			};
						
		</script>
		<script src="./ballsprite.js"></script>
		<script src="./matrices.js"></script>
		<script src="./camera.js"></script>
		<script src="./drawdata.js"></script>
		<script src="./shaders.js"></script>
		<script src="./projectiles.js"></script>
	</body>
</html>